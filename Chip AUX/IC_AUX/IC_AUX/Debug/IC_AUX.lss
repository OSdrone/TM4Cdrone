
IC_AUX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800060  00800060  000002c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001be  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000fa  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000126  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000212  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b5  00000000  00000000  000009e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	c7 c0       	rjmp	.+398    	; 0x1a0 <__vector_8>
  12:	e1 c0       	rjmp	.+450    	; 0x1d6 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	e6 c0       	rjmp	.+460    	; 0x1f0 <__vector_17>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a7 37       	cpi	r26, 0x77	; 119
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	01 c1       	rjmp	.+514    	; 0x248 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
	 uint8_t Comunicacion_activa;
}Datos = {{0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0}, 0};

int main(void){	   
	//Configuracion pines
	DDRD = 0x00; //Entradas
  48:	11 ba       	out	0x11, r1	; 17
	DDRC = _BV(PINC3);
  4a:	88 e0       	ldi	r24, 0x08	; 8
  4c:	84 bb       	out	0x14, r24	; 20
	PORTC |= _BV(PINC3);
  4e:	ab 9a       	sbi	0x15, 3	; 21
	DDRB = _BV(PINB0) | _BV(PINB1) | _BV(PINB2) | _BV(PINB3); //Pin 0 PPM, el resto PWM a implemetar
  50:	8f e0       	ldi	r24, 0x0F	; 15
  52:	87 bb       	out	0x17, r24	; 23
		
	//Configuramos Timer 1 (16 bits ) a unos 65ms	
	TCCR1A = 0;
  54:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = _BV(CS11); // No captura, clock/8, Normal mode
  56:	82 e0       	ldi	r24, 0x02	; 2
  58:	8e bd       	out	0x2e, r24	; 46
	TIMSK = _BV(TOIE1); // Interrupcion de desborde activada
  5a:	94 e0       	ldi	r25, 0x04	; 4
  5c:	99 bf       	out	0x39, r25	; 57
	
	//Configurar Timer 0

	TCCR0 = _BV(CS01);
  5e:	83 bf       	out	0x33, r24	; 51
	TIMSK |= _BV(TOIE0);
  60:	99 b7       	in	r25, 0x39	; 57
  62:	91 60       	ori	r25, 0x01	; 1
  64:	99 bf       	out	0x39, r25	; 57
	
	//Configurar I2C
	TWAR = 0x03; //Direccion esclavo 0x1, llamada al 0 aceptada tambien
  66:	93 e0       	ldi	r25, 0x03	; 3
  68:	92 b9       	out	0x02, r25	; 2
	
	TWSR = 0x00;
  6a:	11 b8       	out	0x01, r1	; 1
	TWBR = 2;    // 400Khz de velocidad en I2C
  6c:	80 b9       	out	0x00, r24	; 0
	
	TWCR = _BV(TWEA) | _BV(TWEN) | _BV(TWIE);
  6e:	85 e4       	ldi	r24, 0x45	; 69
  70:	86 bf       	out	0x36, r24	; 54
	uint8_t Entrada_actual = 0;
	uint8_t Entradas_cambiadas = 0;

	uint16_t Tiempo_Inicio_Flanco[Numero_canales] = {0, 0, 0, 0, 0, 0, 0, 0};
	
	sei();
  72:	78 94       	sei
	
	uint8_t Entrada_anterior = 0;
	uint8_t Entrada_actual = 0;
	uint8_t Entradas_cambiadas = 0;

	uint16_t Tiempo_Inicio_Flanco[Numero_canales] = {0, 0, 0, 0, 0, 0, 0, 0};
  74:	81 2c       	mov	r8, r1
  76:	91 2c       	mov	r9, r1
  78:	c1 2c       	mov	r12, r1
  7a:	d1 2c       	mov	r13, r1
  7c:	e1 2c       	mov	r14, r1
  7e:	f1 2c       	mov	r15, r1
  80:	00 e0       	ldi	r16, 0x00	; 0
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	c0 e0       	ldi	r28, 0x00	; 0
  86:	d0 e0       	ldi	r29, 0x00	; 0
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	a1 2c       	mov	r10, r1
  92:	b1 2c       	mov	r11, r1
	TWBR = 2;    // 400Khz de velocidad en I2C
	
	TWCR = _BV(TWEA) | _BV(TWEN) | _BV(TWIE);
	
	uint8_t Entrada_anterior = 0;
	uint8_t Entrada_actual = 0;
  94:	80 e0       	ldi	r24, 0x00	; 0
				Estado = Normal;
				
				PORTB |= _BV(PINB0);  //Subimos la señal PPM
				TCCR0 = _BV(CS01);				
			}else{
				Datos.PWM_canal[0] = (TCNT1 - Tiempo_Inicio_Flanco[0]);
  96:	e1 e6       	ldi	r30, 0x61	; 97
  98:	f0 e0       	ldi	r31, 0x00	; 0
				PORTB |= _BV(PINB0);  //Subimos la señal PPM
				TCCR0 = _BV(CS01);
  9a:	22 e0       	ldi	r18, 0x02	; 2
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <main+0x58>
  9e:	89 2f       	mov	r24, r25
	sei();
    
	while (1){
		
		Entrada_anterior = Entrada_actual;
		Entrada_actual = PIND;
  a0:	90 b3       	in	r25, 0x10	; 16
		Entradas_cambiadas = (Entrada_actual ^ Entrada_anterior);
  a2:	89 27       	eor	r24, r25
		
		//...Canal..0..//
		if(Entradas_cambiadas & _BV(0)){
  a4:	80 ff       	sbrs	r24, 0
  a6:	11 c0       	rjmp	.+34     	; 0xca <main+0x82>
			if(Entrada_actual & _BV(0)){ //Estado actual 1 (flanco ascendente)
  a8:	90 ff       	sbrs	r25, 0
  aa:	07 c0       	rjmp	.+14     	; 0xba <main+0x72>
				Tiempo_Inicio_Flanco[0] = TCNT1; //Tick
  ac:	ac b4       	in	r10, 0x2c	; 44
  ae:	bd b4       	in	r11, 0x2d	; 45
				
				Estado = Normal;
  b0:	10 92 76 00 	sts	0x0076, r1
				
				PORTB |= _BV(PINB0);  //Subimos la señal PPM
  b4:	c0 9a       	sbi	0x18, 0	; 24
				TCCR0 = _BV(CS01);				
  b6:	23 bf       	out	0x33, r18	; 51
  b8:	08 c0       	rjmp	.+16     	; 0xca <main+0x82>
			}else{
				Datos.PWM_canal[0] = (TCNT1 - Tiempo_Inicio_Flanco[0]);
  ba:	4c b5       	in	r20, 0x2c	; 44
  bc:	5d b5       	in	r21, 0x2d	; 45
  be:	4a 19       	sub	r20, r10
  c0:	5b 09       	sbc	r21, r11
  c2:	51 83       	std	Z+1, r21	; 0x01
  c4:	40 83       	st	Z, r20
				PORTB |= _BV(PINB0);  //Subimos la señal PPM
  c6:	c0 9a       	sbi	0x18, 0	; 24
				TCCR0 = _BV(CS01);
  c8:	23 bf       	out	0x33, r18	; 51
			}
		}
		
		//...Canal..1..//
		if(Entradas_cambiadas & _BV(1)){
  ca:	81 ff       	sbrs	r24, 1
  cc:	0d c0       	rjmp	.+26     	; 0xe8 <main+0xa0>
			if(Entrada_actual & _BV(1)){ //Estado actual 1 (flanco ascendente)
  ce:	91 ff       	sbrs	r25, 1
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <main+0x90>
				Tiempo_Inicio_Flanco[1] = TCNT1; //Tick
  d2:	6c b5       	in	r22, 0x2c	; 44
  d4:	7d b5       	in	r23, 0x2d	; 45
  d6:	08 c0       	rjmp	.+16     	; 0xe8 <main+0xa0>
			}else{
				Datos.PWM_canal[1] = (TCNT1 - Tiempo_Inicio_Flanco[1]);
  d8:	4c b5       	in	r20, 0x2c	; 44
  da:	5d b5       	in	r21, 0x2d	; 45
  dc:	46 1b       	sub	r20, r22
  de:	57 0b       	sbc	r21, r23
  e0:	53 83       	std	Z+3, r21	; 0x03
  e2:	42 83       	std	Z+2, r20	; 0x02
				PORTB |= _BV(PINB0);  //Subimos la señal PPM
  e4:	c0 9a       	sbi	0x18, 0	; 24
				TCCR0 = _BV(CS01);
  e6:	23 bf       	out	0x33, r18	; 51
			}
		}
		
		//...Canal..2..//
		if(Entradas_cambiadas & _BV(2)){
  e8:	82 ff       	sbrs	r24, 2
  ea:	0d c0       	rjmp	.+26     	; 0x106 <main+0xbe>
			if(Entrada_actual & _BV(2)){ //Estado actual 1 (flanco ascendente)
  ec:	92 ff       	sbrs	r25, 2
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <main+0xae>
				Tiempo_Inicio_Flanco[2] = TCNT1; //Tick
  f0:	ac b5       	in	r26, 0x2c	; 44
  f2:	bd b5       	in	r27, 0x2d	; 45
  f4:	08 c0       	rjmp	.+16     	; 0x106 <main+0xbe>
			}else{
				Datos.PWM_canal[2] = (TCNT1 - Tiempo_Inicio_Flanco[2]);
  f6:	4c b5       	in	r20, 0x2c	; 44
  f8:	5d b5       	in	r21, 0x2d	; 45
  fa:	4a 1b       	sub	r20, r26
  fc:	5b 0b       	sbc	r21, r27
  fe:	55 83       	std	Z+5, r21	; 0x05
 100:	44 83       	std	Z+4, r20	; 0x04
				PORTB |= _BV(PINB0);  //Subimos la señal PPM
 102:	c0 9a       	sbi	0x18, 0	; 24
				TCCR0 = _BV(CS01);
 104:	23 bf       	out	0x33, r18	; 51
			}
		}
		
		//...Canal..3..//
		if(Entradas_cambiadas & _BV(3)){
 106:	83 ff       	sbrs	r24, 3
 108:	0d c0       	rjmp	.+26     	; 0x124 <main+0xdc>
			if(Entrada_actual & _BV(3)){ //Estado actual 1 (flanco ascendente)
 10a:	93 ff       	sbrs	r25, 3
 10c:	03 c0       	rjmp	.+6      	; 0x114 <main+0xcc>
				Tiempo_Inicio_Flanco[3] = TCNT1; //Tick
 10e:	cc b5       	in	r28, 0x2c	; 44
 110:	dd b5       	in	r29, 0x2d	; 45
 112:	08 c0       	rjmp	.+16     	; 0x124 <main+0xdc>
			}else{
				Datos.PWM_canal[3] = (TCNT1 - Tiempo_Inicio_Flanco[3]);
 114:	4c b5       	in	r20, 0x2c	; 44
 116:	5d b5       	in	r21, 0x2d	; 45
 118:	4c 1b       	sub	r20, r28
 11a:	5d 0b       	sbc	r21, r29
 11c:	57 83       	std	Z+7, r21	; 0x07
 11e:	46 83       	std	Z+6, r20	; 0x06
				PORTB |= _BV(PINB0);  //Subimos la señal PPM
 120:	c0 9a       	sbi	0x18, 0	; 24
				TCCR0 = _BV(CS01);
 122:	23 bf       	out	0x33, r18	; 51
			}
		}
		
		//...Canal..4..//
		if(Entradas_cambiadas & _BV(4)){
 124:	84 ff       	sbrs	r24, 4
 126:	0d c0       	rjmp	.+26     	; 0x142 <main+0xfa>
			if(Entrada_actual & _BV(4)){ //Estado actual 1 (flanco ascendente)
 128:	94 ff       	sbrs	r25, 4
 12a:	03 c0       	rjmp	.+6      	; 0x132 <main+0xea>
				Tiempo_Inicio_Flanco[4] = TCNT1; //Tick
 12c:	0c b5       	in	r16, 0x2c	; 44
 12e:	1d b5       	in	r17, 0x2d	; 45
 130:	08 c0       	rjmp	.+16     	; 0x142 <main+0xfa>
			}else{
				Datos.PWM_canal[4] = (TCNT1 - Tiempo_Inicio_Flanco[4]);
 132:	4c b5       	in	r20, 0x2c	; 44
 134:	5d b5       	in	r21, 0x2d	; 45
 136:	40 1b       	sub	r20, r16
 138:	51 0b       	sbc	r21, r17
 13a:	51 87       	std	Z+9, r21	; 0x09
 13c:	40 87       	std	Z+8, r20	; 0x08
				PORTB |= _BV(PINB0);  //Subimos la señal PPM
 13e:	c0 9a       	sbi	0x18, 0	; 24
				TCCR0 = _BV(CS01);
 140:	23 bf       	out	0x33, r18	; 51
			}
		}
		
		//...Canal..5..//
		if(Entradas_cambiadas & _BV(5)){
 142:	85 ff       	sbrs	r24, 5
 144:	0d c0       	rjmp	.+26     	; 0x160 <main+0x118>
			if(Entrada_actual & _BV(5)){ //Estado actual 1 (flanco ascendente)
 146:	95 ff       	sbrs	r25, 5
 148:	03 c0       	rjmp	.+6      	; 0x150 <main+0x108>
				Tiempo_Inicio_Flanco[5] = TCNT1; //Tick
 14a:	ec b4       	in	r14, 0x2c	; 44
 14c:	fd b4       	in	r15, 0x2d	; 45
 14e:	08 c0       	rjmp	.+16     	; 0x160 <main+0x118>
			}else{
				Datos.PWM_canal[5] = (TCNT1 - Tiempo_Inicio_Flanco[5]);
 150:	4c b5       	in	r20, 0x2c	; 44
 152:	5d b5       	in	r21, 0x2d	; 45
 154:	4e 19       	sub	r20, r14
 156:	5f 09       	sbc	r21, r15
 158:	53 87       	std	Z+11, r21	; 0x0b
 15a:	42 87       	std	Z+10, r20	; 0x0a
				PORTB |= _BV(PINB0);  //Subimos la señal PPM
 15c:	c0 9a       	sbi	0x18, 0	; 24
				TCCR0 = _BV(CS01);
 15e:	23 bf       	out	0x33, r18	; 51
			}
		}
		
		//...Canal..6..//
		if(Entradas_cambiadas & _BV(6)){
 160:	86 ff       	sbrs	r24, 6
 162:	0d c0       	rjmp	.+26     	; 0x17e <main+0x136>
			if(Entrada_actual & _BV(6)){ //Estado actual 1 (flanco ascendente)
 164:	96 ff       	sbrs	r25, 6
 166:	03 c0       	rjmp	.+6      	; 0x16e <main+0x126>
				Tiempo_Inicio_Flanco[6] = TCNT1; //Tick
 168:	cc b4       	in	r12, 0x2c	; 44
 16a:	dd b4       	in	r13, 0x2d	; 45
 16c:	08 c0       	rjmp	.+16     	; 0x17e <main+0x136>
			}else{
				Datos.PWM_canal[6] = (TCNT1 - Tiempo_Inicio_Flanco[6]);
 16e:	4c b5       	in	r20, 0x2c	; 44
 170:	5d b5       	in	r21, 0x2d	; 45
 172:	4c 19       	sub	r20, r12
 174:	5d 09       	sbc	r21, r13
 176:	55 87       	std	Z+13, r21	; 0x0d
 178:	44 87       	std	Z+12, r20	; 0x0c
				PORTB |= _BV(PINB0);  //Subimos la señal PPM
 17a:	c0 9a       	sbi	0x18, 0	; 24
				TCCR0 = _BV(CS01);
 17c:	23 bf       	out	0x33, r18	; 51
			}
		}
				
		
		//...Canal..7..//
		if(Entradas_cambiadas & _BV(7)){
 17e:	88 23       	and	r24, r24
 180:	0c f0       	brlt	.+2      	; 0x184 <main+0x13c>
 182:	8d cf       	rjmp	.-230    	; 0x9e <main+0x56>
			if(Entrada_actual & _BV(7)){ //Estado actual 1 (flanco ascendente)
 184:	99 23       	and	r25, r25
 186:	1c f4       	brge	.+6      	; 0x18e <main+0x146>
				Tiempo_Inicio_Flanco[7] = TCNT1; //Tick
 188:	8c b4       	in	r8, 0x2c	; 44
 18a:	9d b4       	in	r9, 0x2d	; 45
 18c:	88 cf       	rjmp	.-240    	; 0x9e <main+0x56>
			}else{
				Datos.PWM_canal[7] = (TCNT1 - Tiempo_Inicio_Flanco[7]);
 18e:	4c b5       	in	r20, 0x2c	; 44
 190:	5d b5       	in	r21, 0x2d	; 45
 192:	48 19       	sub	r20, r8
 194:	59 09       	sbc	r21, r9
 196:	57 87       	std	Z+15, r21	; 0x0f
 198:	46 87       	std	Z+14, r20	; 0x0e
				PORTB |= _BV(PINB0);  //Subimos la señal PPM
 19a:	c0 9a       	sbi	0x18, 0	; 24
				TCCR0 = _BV(CS01);
 19c:	23 bf       	out	0x33, r18	; 51
 19e:	7f cf       	rjmp	.-258    	; 0x9e <main+0x56>

000001a0 <__vector_8>:
		}					
	}
}
   

ISR(TIMER1_OVF_vect){
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
	if(Estado == Normal){
 1ac:	80 91 76 00 	lds	r24, 0x0076
 1b0:	81 11       	cpse	r24, r1
 1b2:	08 c0       	rjmp	.+16     	; 0x1c4 <__vector_8+0x24>
		Datos.Comunicacion_activa = 0x11;
 1b4:	81 e1       	ldi	r24, 0x11	; 17
 1b6:	80 93 75 00 	sts	0x0075, r24
		PORTC &= ~_BV(PINC3);
 1ba:	ab 98       	cbi	0x15, 3	; 21
		Estado = Conexion_Perdida;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 76 00 	sts	0x0076, r24
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <__vector_8+0x2a>
	}else{
		Datos.Comunicacion_activa = 0;
 1c4:	10 92 75 00 	sts	0x0075, r1
		PORTC |= _BV(PINC3);
 1c8:	ab 9a       	sbi	0x15, 3	; 21
		//Activar Protocolo Perdida Transmision
		}
}
 1ca:	8f 91       	pop	r24
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_9>:

ISR(TIMER0_OVF_vect){
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
	PORTB &= ~_BV(PINB0);;  //Bajamos la señal PPM
 1e0:	c0 98       	cbi	0x18, 0	; 24
	TCCR0 = 0x00;
 1e2:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0;				//Paramos y reiniciamos el contador;
 1e4:	12 be       	out	0x32, r1	; 50
}
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_17>:

ISR(TWI_vect){
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
	static uint8_t Registro = 0;
	
	switch((TWSR & 0xF8)){
 200:	81 b1       	in	r24, 0x01	; 1
 202:	88 7f       	andi	r24, 0xF8	; 248
 204:	88 3a       	cpi	r24, 0xA8	; 168
 206:	19 f0       	breq	.+6      	; 0x20e <__vector_17+0x1e>
 208:	88 3b       	cpi	r24, 0xB8	; 184
 20a:	41 f0       	breq	.+16     	; 0x21c <__vector_17+0x2c>
 20c:	12 c0       	rjmp	.+36     	; 0x232 <__vector_17+0x42>
		case 0x60: break;
		case 0x80: break;
		case 0x88: break;
		
		case 0xA8: Registro = 0; 
				   TWDR = *((uint8_t *)&Datos + Registro++);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 60 00 	sts	0x0060, r24
 214:	80 91 61 00 	lds	r24, 0x0061
 218:	83 b9       	out	0x03, r24	; 3
//		case 0xA8: TWDR = 0x11;
				   break;
 21a:	0b c0       	rjmp	.+22     	; 0x232 <__vector_17+0x42>
		case 0xB8: TWDR = *((uint8_t *)&Datos + Registro++);
 21c:	e0 91 60 00 	lds	r30, 0x0060
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	8e 0f       	add	r24, r30
 224:	80 93 60 00 	sts	0x0060, r24
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ef 59       	subi	r30, 0x9F	; 159
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	80 81       	ld	r24, Z
 230:	83 b9       	out	0x03, r24	; 3
//		case 0xB8: TWDR =  0x12;
		case 0xC0: break;
	}
	TWCR |= _BV(TWINT); 
 232:	86 b7       	in	r24, 0x36	; 54
 234:	80 68       	ori	r24, 0x80	; 128
 236:	86 bf       	out	0x36, r24	; 54
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
